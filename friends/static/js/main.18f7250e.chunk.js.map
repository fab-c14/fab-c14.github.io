{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","React","createElement","className","alt","src","concat","CardList","friends","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","Fragment","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_Component","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","onSearchChange","event","setState","target","value","state","console","log","_inherits","_createClass","_this2","fetch","response","json","users","_this$state","filterFriends","filter","friend","toLowerCase","includes","length","Component","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.18f7250e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\n\n// const Card = (props)=>{\nconst Card = ({name,email,id})=>{ // this is destructuring directly now there is no need of below line \n    // const {name,email,id} = props; // destructuring\n    return(\n        <div className='tc bg-light-green dib br3 pr3 ma2 grow bw2 shadow-5'>\n            {/* <h1>{props.name}</h1> */} {/*this is for when you are not destructuring the code*/}\n            <h1>{name}</h1>\n\n            <div >\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n                <div>\n                    <h2>Name : {name}</h2>\n                    <p>Email : {email}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({friends})=>{\n    // if(true){\n    //     throw new Error('NOOOOOOOOO !'); // this was for error Boundary\n    // }\n    const cardComponent = friends.map((user,i)=>{\n        return <Card key={i} id={friends[i].id} name={friends[i].name} email={friends[i].email}/> \n    })\n    return(\n        <div>\n{/*         \n        <Card id={friends[1].id} name={friends[1].name} email={friends[1].email}/>\n        <Card id={friends[2].id} name={friends[2].name} email={friends[2].email}/>\n        <Card id={friends[3].id} name={friends[3].name} email={friends[3].email}/>\n        <Card id={friends[4].id} name={friends[4].name} email={friends[4].email}/> */}\n        {/* now lets wrap it - used map you can use forEach */\n        }\n        {/* anything inside this is javascript*/}\n        {cardComponent};\n      </div>\n    );\n}\n\nexport default CardList;","\nimport React from 'react';\nconst SearchBox = ({searchfield,searchChange})=>{\n    return (\n        <>\n            <div className='pa2'> \n                <input\n                className='pa2 ba b-green bg-light-test-blue'\n                type='search' \n                placeholder='search friends' \n                onChange={searchChange}\n                \n                />\n            </div>\n        </>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n// state\n// props\n// children - every props has a children\n // return props.children;\n  // but if we do this\nconst Scroll = (props)=>{\n   \n    // console.log(props.children);\n    // // return <h1> Hi <h1>;\n    // return props.children;\n    // lets create a scrollable component\n\n    return (\n        <div style={{overflowY:\"scroll\", border:'5px solid black',height:'400px'}}>\n            {props.children}\n        </div>\n    )\n};\nexport default Scroll;","import React, {Component} from \"react\";\nimport CardList from '../components/CardList'\n// import { friends } from \"./friends\"; we are going to use api instead of this now \nimport SearchBox from \"../components/SearchBox\";\nimport './App.css';\n\nimport Scroll from '../components/Scroll';\n// import ErrorBoundary from \"../components/ErrorBoundary\";\n// const steate = {\n//     friends:friends,\n//     searchfield:''\n// }\n//  how to add states\n\nclass App extends Component{\n    constructor(){\n        super(); // calling the constructor of inherited (parent)\n        // we use constructor\n        this.state = { // state can change , they live inside parent but we have to inherit them\n            friends:[], // this would be an empty array because at intially we would not have any friend/robot\n            // react comes with lifecycle methods, these are methods which we can use, they will automatically trigger when app is loaded , lifecycle hooks (they are called)\n\n            // the way react works is \n            // 1.mounting - when our app is loaded , our webpage is nothing but a div with root id, when we say mount we are replacing component with actuall code written inside component\n            // when mounting -> does this app have a constructor, does this have componentWillMount(), render(),componentDidMOunt()\n            //`2.updating\n            // you can found methods on official site\n            // 3.unmounting - move to different page, \n            searchfield:''\n        }\n        console.log('constructor');\n    }\n\n    // 1. mount - example \n    componentDidMount(){\n        // this.setState({friends:friends})\n        // getting data from api and  using that data \n        fetch('https://jsonplaceholder.typicode.com/users') // request to server\n        .then(response=>{\n            return response.json();\n        })\n        .then(users=>{\n            this.setState({friends:users});\n        })\n       \n        // console.log('componentdidmount');\n    }\n    onSearchChange = (event)=>{\n        // use dom manipulation\n        this.setState({searchfield:event.target.value});\n        // console.log(event.target.value);\n        \n        // console.log(filterFriends);\n    }\n\n\n    render(){\n\n        console.log('render');\n        const {friends,searchfield} = this.state;\n        const filterFriends = friends.filter(friend =>{\n            return friend.name.toLowerCase().includes(searchfield.toLowerCase())\n           \n        }) \n\n\n    //     if(!friends.length){\n    //         return <h1>Loading ... </h1>\n    //     } \n        \n    //     else{\n    // return (\n    //     <div className=\"tc\">\n    //         <h1 className=\"f1\">My College Friends</h1>\n    //         <SearchBox searchChange={this.onSearchChange}/>\n    //         <Scroll> {/*lets create this component */}\n    //             <CardList friends={filterFriends}/>\n    //         </Scroll>\n    //     </div>\n    //     ); \n    // }\n    // use ternary instead of if -else\n\n    return !friends.length ?\n    <h1>Loading ... </h1> : \n    (\n        <div className=\"tc\">\n            <h1 className=\"f1\">My College Friends</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n            <Scroll> {/*lets create this component */}\n            {/* <ErrorBoundary> */}\n                 <CardList friends={filterFriends}/>\n            {/* </ErrorBoundary> */}\n            </Scroll>\n         </div>\n         );\n\n    \n    }\n}\n\nexport default App;\n\n// props, state -> read props and render \n// one way data flow -> cardlist - pure function, receives input and gives same output - these are called pure components or dumb components. (this is really nice )\n\n// that is this we have until this point, props never change, we never modify them, \n// but now we need a memory in our app\n\n// State - obj (that describes your application whatever is entered in the state., we are able to change)\n\n// STATE >> props \n// now lets start\n\n\n// now after completing we are going to discuss about the new topic which we have not covered\n\n// in real life we would not write friends.js, we would something use that is called api \n// we would make request and \n// actually we can do it by using jsonplaceholder\n// we can use this site to save our time and money\n// using this lets make our app more releastic\n\n// this app has some state so it is called smart component, \n\n\n// \n\n\n// ERROR Boundary in React \n// ERROR Boundaries, if there has some error in component -> for whatever reason there was not a graceful way to handle it . \n\n// even if component breaks, then \n\n// we are going to learn error boundaries and add this to  our project\n\n// deploying our react app ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n// import Card from './Card';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport './index.css';\n// import { friends } from './friends';\n// import CardList from './CardList';\n\nimport App from './containers/App.js';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    {/* <div> */}\n      {/* <Card id={friends[0].id} name={friends[0].name} email={friends[0].email}/> \n      <Card id={friends[1].id} name={friends[1].name} email={friends[1].email}/>\n      <Card id={friends[2].id} name={friends[2].name} email={friends[2].email}/>\n      <Card id={friends[3].id} name={friends[3].name} email={friends[3].email}/>\n      <Card id={friends[4].id} name={friends[4].name} email={friends[4].email}/> */}\n      {/* <CardList friends={friends}/> */}\n    {/* </div> */}\n\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}